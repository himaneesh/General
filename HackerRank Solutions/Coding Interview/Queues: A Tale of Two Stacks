import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
	public static class MyQueue<T> {
        Stack<T> stackNewestOnTop = new Stack<T>();
        Stack<T> stackOldestOnTop = new Stack<T>();

        public void enqueue(T value) { // Push onto newest stack
        	
            stackNewestOnTop.push(value);
       
        }

        private void updateNew() {
        	   if(stackNewestOnTop.size()>0){
        		   stackOldestOnTop.clear();
                   for(int i=stackNewestOnTop.size()-1;i>=0;i--){
                       stackOldestOnTop.push(stackNewestOnTop.get(i));
                   }
                  
                   }else {
        	   stackOldestOnTop.clear();
                   }
		}

		private void updateOld() {
		if(stackOldestOnTop.isEmpty()) {
				   while(!stackNewestOnTop.isEmpty()) {
	                    stackOldestOnTop.push(stackNewestOnTop.pop());
				   }
		}
		}

		public T peek() {
			updateOld();
            return stackOldestOnTop.peek();
        }

        public void dequeue() {        
        	
        	updateOld();
            stackOldestOnTop.pop();
        }
    }

    
    public static void main(String[] args) {
        MyQueue<Integer> queue = new MyQueue<Integer>();
        
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        
        for (int i = 0; i < n; i++) {
            int operation = scan.nextInt();
            if (operation == 1) { // enqueue
                queue.enqueue(scan.nextInt());
            } else if (operation == 2) { // dequeue
                queue.dequeue();
            } else if (operation == 3) { // print/peek
                System.out.println(queue.peek());
            }
        }
        scan.close();
    }
}
