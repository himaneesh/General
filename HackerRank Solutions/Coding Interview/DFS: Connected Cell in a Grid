import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
	public static int getBiggestRegion(int[][] matrix,int m, int n) {
		boolean isVisited[][] = new  boolean[m][n];
		int count=0;
		int max = 0;
        for(int i=0;i<m;i++) {
        	for(int j=0;j<n;j++) {
        		if(!isVisited[i][j]) {
        			/*
        			 * to prevent looping through recursion
        			 */
        			count =recurseForDFSPath( matrix,i,j,isVisited);
        			max=Math.max(count, max);
        		}
        	}
        }
        return max;
    }
	
	private static int recurseForDFSPath(int[][] matrix,int row, int column,boolean[][] isVisited) {
		if(row<0 || column<0 || row>=matrix.length || column>=matrix[0].length) {
			return 0;
		}
		if(matrix[row][column]==0) {
			isVisited[row][column]=true;
			return 0;
			
		}
		if(isVisited[row][column]) {
			return 0;
		}
		/*
		 * 
		 * VIMP to put it here after checking for 0
		 * 
7
3
1 1 0
0 0 0
0 0 0
0 0 0
1 1 1
0 1 1
0 0 0
		 */
		isVisited[row][column]=true;
		int count=1;
		count+=recurseForDFSPath(matrix,row+1,column,isVisited);
		count+=recurseForDFSPath(matrix,row,column+1,isVisited);//d
		count+=recurseForDFSPath(matrix,row+1,column+1,isVisited);//d
		count+=recurseForDFSPath(matrix,row-1,column,isVisited);//d
		count+=recurseForDFSPath(matrix,row,column-1,isVisited);//d
		count+=recurseForDFSPath(matrix,row-1,column-1,isVisited);//d
		count+=recurseForDFSPath(matrix,row-1,column+1,isVisited);//d
		count+=recurseForDFSPath(matrix,row+1,column-1,isVisited);//d
		
		return count;
	}
    
    public static void main(String[] args) {
    //	long startTime = System.nanoTime();

        Scanner in = new Scanner(System.in);
        int m = in.nextInt();
        int n = in.nextInt();
        int grid[][] = new int[m][n];
        for(int grid_i=0; grid_i < m; grid_i++){
            for(int grid_j=0; grid_j < n; grid_j++){
                grid[grid_i][grid_j] = in.nextInt();
            }
        }
        System.out.println(getBiggestRegion(grid,m,n));
        //long endTime   = System.nanoTime();
        //long totalTime = endTime - startTime;
        //System.out.println(totalTime);
    }
}
