package com.hp.hr;

import java.util.ArrayList;
import java.util.HashMap;
/*
 * 
 * 
 * Every data structure has its own special characteristics for example a BST 
 * is used when quick searching of an element (in log(n)) is required. A heap or a
 *  priority queue is used when the minimum or maximum element needs to be fetched in constant 
 *  time. Similarly a hash table is used to fetch, add and remove an element in constant time. 
 * It is necessary for anyone to be clear with the working of a 
 * hash table before moving on to the implementation aspect. 
 * https://www.geeksforgeeks.org/implementing-our-own-hash-table-with-separate-chaining-in-java/
 * 
 */
public class Hash<T, K, V> {
	ArrayList<HashNode<K, V>> bucket = null;
	  private int size;
	  private int numBuckets;
	  
	public Hash() {
		 bucket = new ArrayList<>();
		 numBuckets=10;
		 size = 0;
		 
		 for(int i=0;i<numBuckets;i++) {
			 bucket.add(null);
		 }
	}
    // Returns value for a key
    public V get(K key)
    {
        // Find head of chain for given key
        int bucketIndex = getBuckIndex(key);
        HashNode<K, V> head = bucket.get(bucketIndex);
 
        // Search key in chain
        while (head != null)
        {
            if (head.key.equals(key))
                return head.value;
            head = head.next;
        }
 
        // If key not found
        return null;
    }
private int getBuckIndex(K key) {
	int index = key.hashCode()%2;
	return index;
}
	private int getSize() {
		return size;
	}
	void put(K key, V value) {
		int index = getBuckIndex(key);
		HashNode<K,V> headNode = bucket.get(index);
		if(null!=headNode) {
			System.out.println("Collision Detected");
		}
		
		while(headNode!=null) {
			if(headNode.key.equals(key)) {
				/*
				 * Overwrite value with new value if key is found
				 */
				headNode.value=value;
				return;
			}
			headNode=headNode.next;
		}
		/*
		 * 
		 * ????
		 */
		size++;
		HashNode<K,V> newNode = new HashNode(key, value);
		headNode = bucket.get(index);
		/*
		 * insert at the top of the bucket
		 */
		newNode.next=headNode;
		/*
		 * resetting value at that index:auto linking
		 */
		bucket.set(index, newNode);
		// If load factor goes beyond threshold, then
        // double hash table size
        if ((1.0*size)/numBuckets >= 0.7)
        {
            ArrayList<HashNode<K, V>> temp = bucket;
            bucket = new ArrayList<>();
            numBuckets = 2 * numBuckets;
            size = 0;
            for (int i = 0; i < numBuckets; i++)
            	bucket.add(null);
 
            for (HashNode<K, V> headNodee : temp)
            {
                while (headNodee != null)
                {
                	put(headNodee.key, headNodee.value);
                    headNodee = headNodee.next;
                }
            }
        }
		
	}
    // Method to remove a given key
    public V remove(K key)
    {
        // Apply hash function to find index for given key
        int bucketIndex = getBuckIndex(key);
 
        // Get head of chain
        HashNode<K, V> head = bucket.get(bucketIndex);
 
        // Search for key in its chain
        HashNode<K, V> prev = null;
        while (head != null)
        {
            // If Key found
            if (head.key.equals(key))
                break;
 
            // Else keep moving in chain
            prev = head;
            head = head.next;
        }
 
        // If key was not there
        if (head == null)
            return null;
 
        // Reduce size
        size--;
 
        // Remove key
        if (prev != null)
            prev.next = head.next;
        else
            bucket.set(bucketIndex, head.next);
 
        return head.value;
    }
	void isEmpty() {
		
	}
	public static void main(String[] args) {
		Hash hashMap = new Hash<>();
		hashMap.put(1,"Hi");
		hashMap.put(4,"There");
		hashMap.put(2,"!");
		hashMap.put(3,"Del");
		hashMap.put(5,"There");
		hashMap.put(6,"There");
		hashMap.put(7,"There");
		hashMap.put(8,"There");
		hashMap.put(9,"There");
		hashMap.put(10,"There");
		System.out.println(hashMap.size);
	
	
	
	
	}

}
class HashNode<K, V>{
	K key;
	V value;
	

    // Reference to next node
    HashNode<K, V> next;
    
    // Constructor
    public HashNode(K key, V value)
    {
        this.key = key;
        this.value = value;
    }
}
